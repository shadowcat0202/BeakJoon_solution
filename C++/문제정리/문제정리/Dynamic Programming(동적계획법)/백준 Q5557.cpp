/*
문제
상근이가 1학년 때, 덧셈, 뺄셈을 매우 좋아했다. 
상근이는 숫자가 줄 지어있는 것을 보기만 하면, 마지막 두 숫자 사이에 '='을 넣고, 나머지 숫자 사이에는 '+' 또는 '-'를 넣어 등식을 만들며 놀고 있다. 
예를 들어, "8 3 2 4 8 7 2 4 0 8 8"에서 등식 "8+3-2-4+8-7-2-4-0+8=8"을 만들 수 있다.

상근이는 올바른 등식을 만들려고 한다. 
상근이는 아직 학교에서 음수를 배우지 않았고, 20을 넘는 수는 모른다. 
따라서, 왼쪽부터 계산할 때, 중간에 나오는 수가 모두 0 이상 20 이하이어야 한다. 
예를 들어, "8+3+2-4-8-7+2+4+0+8=8"은 올바른 등식이지만, 8+3+2-4-8-7이 음수이기 때문에, 상근이가 만들 수 없는 등식이다.

숫자가 주어졌을 때, 상근이가 만들 수 있는 올바른 등식의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 숫자의 개수 N이 주어진다. (3 ≤ N ≤ 100) 
둘째 줄에는 0 이상 9 이하의 정수 N개가 공백으로 구분해 주어진다.

출력
첫째 줄에 상근이가 만들 수 있는 올바른 등식의 개수를 출력한다. 
이 값은 2^63 - 1 이하이다.

예제 입력 1
11
8 3 2 4 8 7 2 4 0 8 8
예제 출력 1
10
*/

#include <iostream>
#define endl "\n"

int Q5557_arr[101];
int Q5557_N, Q5557_match_value;
long long Q5557_dp[23][100] = {0};

void Q5557_input() {
	std::cin >> Q5557_N;
	for (int i = 1; i <= Q5557_N; i++) {
		std::cin >> Q5557_arr[i];
	}
}

long long Q5557_solution() {
	Q5557_dp[Q5557_arr[1]][1] = 1;	//가장 앞의 수의 경우의 수는 1개

	for (int arr = 2; arr <= Q5557_N; arr++) {
		for (int v = 0; v < 21; v++) {
			if (Q5557_dp[v][arr - 1]) {
				if (v + Q5557_arr[arr] <= 20) {
					Q5557_dp[v + Q5557_arr[arr]][arr] += Q5557_dp[v][arr - 1];
				}
				if (v - Q5557_arr[arr] >= 0) {
					Q5557_dp[v - Q5557_arr[arr]][arr] += Q5557_dp[v][arr - 1];
				}
			}
		}
	}

	
	return Q5557_dp[Q5557_arr[Q5557_N]][Q5557_N-1];
}


void Q5557() {
	std::ios::sync_with_stdio(0);
	std::cin.tie(0); std::cout.tie(0);
	Q5557_input();
	std::cout << Q5557_solution();
}