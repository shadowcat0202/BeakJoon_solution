/*
문제
기숙사에서 살고 있는 준규는 한 개의 멀티탭을 이용하고 있다.
준규는 키보드, 헤어드라이기, 핸드폰 충전기, 디지털 카메라 충전기 등 
여러 개의 전기용품을 사용하면서 어쩔 수 없이 각종 전기용품의 플러그를 뺐다 꽂았다 하는 불편함을 겪고 있다. 
그래서 준규는 자신의 생활 패턴을 분석하여, 자기가 사용하고 있는 전기용품의 사용순서를 알아내었고, 
이를 기반으로 플러그를 빼는 횟수를 최소화하는 방법을 고안하여 보다 쾌적한 생활환경을 만들려고 한다.

예를 들어 3 구(구멍이 세 개 달린) 멀티탭을 쓸 때, 전기용품의 사용 순서가 아래와 같이 주어진다면,

키보드
헤어드라이기
핸드폰 충전기
디지털 카메라 충전기
키보드
헤어드라이기

키보드, 헤어드라이기, 핸드폰 충전기의 플러그를 순서대로 멀티탭에 꽂은 다음 디지털 카메라 충전기 플러그를 꽂기 전에 핸드폰충전기 플러그를 빼는 것이 최적일 것이므로 플러그는 한 번만 빼면 된다.

입력
첫 줄에는 멀티탭 구멍의 개수 N (1 ≤ N ≤ 100)과 전기 용품의 총 사용횟수 K (1 ≤ K ≤ 100)가 정수로 주어진다. 
두 번째 줄에는 전기용품의 이름이 K 이하의 자연수로 사용 순서대로 주어진다. 
각 줄의 모든 정수 사이는 공백문자로 구분되어 있다.

출력
하나씩 플러그를 빼는 최소의 횟수를 출력하시오.

예제 입력 1
2 7
2 3 2 3 1 2 7
예제 출력 1
2
*/

//1. 바로 사용 할 가전제품을 배열에 넣고 
//2. 현재 사용중인 가전제품 중에서 큐에 대기중인 제품중 가장 나중에 들어올거 먼저 뺸다

#include <iostream>
#include <vector>
#include <algorithm>
int Q1700_solution() {
	int result = 0;
	int N, K;
	std::vector<int> v;
	
	std::cin >> N >> K;

	for (int i = 0; i < K; i++) {
		int a;
		std::cin >> a;
		v.push_back(a);
	}
	
	std::vector<int> mt;
	


	//1. v 탐색
	//2. 플러그에 있다면 계속 사용
	//3. 플러그가 비어있다면 빈 공간에 끼우기
	//4. 빈공간도 없고 해당 전자제품이 아닌경우 추후에 가장 늦게 사용되는 콘센트 제거후 새로운 제품 연결
	while (!v.empty()) {
		int now = v[0];


		bool plug = false;
		//now가 꽂혀있는가?
		for (int i = 0; i < mt.size(); i++) {
			if (mt[i] == now) {
				plug = true;
				break;
			}
		}
		if (plug)	continue;

		//now가 꽂혀있지 않으면서 플러그가 비어있는 경우 꽂아준다
		if (mt.size() < N) {
			mt.push_back(now);
			continue;
		}


		//플러그가 모두 사용중이며 해당 기기가 꽂혀있지 않는다면
		//가장 나중에 사용되는 기기 찾기
		for (int i = 0; i < N; i++) {
		}
			
		

	}

	return result;

}

void Q1700() {
	std::cout << Q1700_solution();

}