#-------------------------------자료구조------------------------------------#
array(그냥 배열)(이해완료)

linked list(이해 완료)
https://m.blog.naver.com/PostView.nhn?blogId=kartmon&logNo=221510676043&proxyReferer=https:%2F%2Fwww.google.com%2F
동적할당으로 데이터를 저장하는 방법
일반적으로 배열 큐 스택 처럼 중간에 데이터를 삽입 삭제하기위해서 불필요한 연산을 보완하기 위해 필요한것이 링크드리스트이다
struct Node{
	datatype data;
	Node *nextNode;
}


stack(이해완료)
	https://blockdmask.tistory.com/100?category=249379
	#include <stack>
	stack<datatype> st;
	st.empty(); := 비어있으면 true
	st.size(); :=stack 사이즈 return
	st.top(); := 가장 위에 있는 인자 return
	st.pop(); := st.top()이 가리키는 원소 return 후 제거


queue(이해완료)
	queue는 일방통행 deque는 양방향 통행
	https://twpower.github.io/76-how-to-use-queue-in-cpp
	#include <queue>
	queue<datatype> q;
	q.push(n); := q에 원소 추가 뒤에
	q.pop(); := q앞에있는 원소 return 후 삭제

	q.front();	:=가장 앞에있는 원소 참조
	q.back(); :=가장 뒤에있는 원소 참조

	q.empty();	:= 큐가 비어있으면 true
	q.size();	:= 큐 사이즈 return


deque(이해완료)
	https://blockdmask.tistory.com/73
	#include <deque>
	deque<datatype> dq;
	deque dq(n,m) := m으로 초기화된 n개의 원소 생성
	deque dq2(dq1) := dq1을 복사한 dq2 생성
	dq.assign(4, 3); := 3의 값으로 4개의 원소 할당
	dq.push_front(n); dq.push_back(n); := 앞/뒤에 n 삽입
	dq.pop_front(); dq.pop_back();	:= 앞/뒤 원소 return후 제거
	dq.insert(n,m); := n번째 위치에 m삽입
	dq.erase(iter); := iter가 가리키는 원소 제거후 앞뒤중 개수가 적은 원소를 당겨서 채움

	dq[idx];  dq.at(idx); := idx 원소 참조 속도면으로는 []가 .at()보다 빠르다
	dq.front(); dq.back();	:=앞/뒤 원소 참조
		
	dq.empty(); := 비어있으면 true


tree(어느정도 이해했지만 조금 복잡해서 다시 봐야함)
	트리같은 구조가 필요하다면 boost graph libary를 사용하고
	트리같이 접근하고 싶다면 std::map 혹은 std::set에 가깝다
	#include <map>필요
	#include <set>필요
	-BST(Binary search tree)
	https://1226choi.tistory.com/55

		struct Node{
			Node *left, *right;
			datatype value;
		}


graph
https://breakcoding.tistory.com/129 (vector)
https://twpower.github.io/72-implement-graph-in-cpp (list 사용)


heap(:빠르게 최대/최소값을 찾아내기위해 고안됨 CBT(완전이진트리)를 기본으로한 자료구조)
https://www.crocus.co.kr/1184
(사용이유: 최대/최소값을 찾는 배열은 O(N)시간이며 힙은 최악의 경우에도 O(logN)에 찾을 수있다)
임의의 subtree에서의 root는 항상 최소 혹은 최대값 유지
[keyPoint] k 인덱스의 자식인덱스는 left = 2*k right = 2*k+1
input(_value)


hash table
https://gamdekong.tistory.com/73
	key-value로 구성된 테이블
	STL::#include <hash_map>

(r-b tree, trie 몰라도 됨)


#-------------------------------알고리즘------------------------------------#

big-O(시간 복잡도 알고리즘)


sorting
https://hsp1116.tistory.com/33
	1.선택정렬(Selection Sort)
	2.삽입정렬(Insertion Sort)
	3.버블정렬(Bubble Sort)
	4.합병정렬(Merge Sort)
	5.퀵정렬(Quick Sort)

brute force(무식하게 모든 경우의 수 탐색 알고리즘)
	- 일반적 방법으로 문제를 해결하기 위해서는 모든 자료를 탐색해야 하기 때문에 특정한 구조를 전체적으로 탐색할 수 있는 방법을 필요로 한다.
	- 알고리즘 설계의 가장 기본적인 접근 방법은 해가 존재할 것으로 예상되는 모든 영역을 전체 탐색하는 방법이다.
	- 선형 구조를 전체적으로 탐색하는 순차 탐색, 비선형 구조를 전체적으로 탐색하는 깊이 우선 탐색(DFS)과 너비 우선 탐색(BFS, breadth first search)이 가장 기본적인 도구이다.

recursion(재귀)
	DFS를 풀기위해 자주 사용되는 방법
	사용 이유
	1.알고리즘 자체가 재귀적으로 표현하기 자연스러울때(가독성)
	2.변수 사용을 줄여준다
	
	치명적 단점
	호출 횟수가 많아지만 스택 오버플로우 발생해서 for문보다 효율이 떨어질수 있다.
	
	해결방법 프로그래머가 꼬리재귀방식으로 개발해야한다

	재귀의 기본예제
	int function(int num){
		if(num == 1)	return 1;
		return num * function(num-1);
	}

iteration(반복자)
https://m.blog.naver.com/demonic3540/221441231759
	컨테이너의 원소들을 순회할 수 있는 "객체"이다
	일종의 포인터로서, 컨테이너의 특정 위치를 가르킨다.
	
	사용 예제)
	template <typename T>
	vector<T> v;
	vector<T>::iterator iter;
	for(iter = v.begin(); iter != v.end(); iter++){
		printf("%d", temp);
	}

binary search(이진탐색)
	-중간값을 활용해서 범위 탐색
	-<algorithm>의 bool binary_search (ForwardIterator 시작(arr), ForwardIterator 끝(arr+n), const T& 찾는값) 를 활용해도 괜춘
BFS/DFS(넓이/깊이 우선 탐색 이건 많이 해봤다)


backtracking(가능한 모든 방법을 탐색)
	-DFS의 단점(굳이 목표지점에 있지 않는 경로로 빠지는 비효율적 결과 초래)을 차단하고 목표 가능성있는 루트를 검사하는 방법
			-DFS수행->유망노드검토->서브트리이동->백트래킹 수행
divide and conquer(분할정복:문제를 나눌 수 없을때까지 나누어서 각각을 풀면서 다시 합병하여 답을 도출)
https://janghw.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Divide-and-Conquer-%EB%B6%84%ED%95%A0%EC%A0%95%EB%B3%B5
	1.Divide:문제를 분할할수 있는경우 2개이상의 문제로 나눔
	2.Conquer: 나누어진 문제가 여전히 분할 가능하다면 다시 Divide 수행 아니면 문제 수행
	3.Combine: Conquer한 문제를 통합하여 본 문제의 답 도출
	
	
bit manipulation(bit조작하는 방법 숙지)
https://conscientiousness.tistory.com/entry/Math-Bit-Manipulation-%EB%B9%84%ED%8A%B8-%EC%A1%B0%EC%9E%91
	<<, >>: 시프트 연산자는 비트들을 좌(<<), 우(>>) 로 이동합니다. 좌로 이동한다면 0을 붙여나가고, 우로 이동한다면 비트를 지웁니다.
	~: 1의 보수 연산자는 틸드(tilde)라고도 부릅니다. 비트의 상태를 반전시킵니다. (1을 0으로, 0을 1로) 비트를 반전시켰다고 해서 해당하는 수가 바로 음수나 양수가 되지 않습니다. 컴퓨터 비트 체계 2의 보수를 따릅니다. 따라서 비트를 반전시키고(1의 보수 연산), 비트에 1을 더해야 합니다.
	&, |, ^: 비트 논리 연산자에서 & 는 AND, | 는 OR 연산을 말합니다. AND 연산의 경우 피연산자 중에 하나라도 0을 가진다면 0을 반환합니다. OR 연산의 경우 하나라도 1을 가진다면 1을 반환합니다. ^ 는 XOR 연산자입니다. 두 수가 다르면 1을 같으면 0을 반환합니다.  
	


two pointers(완전탐색으로 시간초과가 나는 경우(이중for문으로 시간초과 발생시) 2개의 포인터(체크포인트)를 사용 경과시간 감소)
https://m.blog.naver.com/kks227/220795165570
sliding window



dynamic programming



(topological sort, union-find, KMP 몰라도 됨)

https://xtar.tistory.com/33 링크드리스트
